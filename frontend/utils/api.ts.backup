// frontend/utils/api.ts - MIS √Ä JOUR pour l'authentification Django Admin
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000/api';

class UrbanAPI {
  private baseURL: string;

  constructor() {
    this.baseURL = API_BASE_URL;
  }

  private async makeRequest(endpoint: string, options: RequestInit = {}): Promise<any> {
    const url = `${this.baseURL}${endpoint}`;
    
    const defaultOptions: RequestInit = {
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      ...options,
    };

    // Ajouter le token d'authentification si disponible
    const token = localStorage.getItem('auth_token');
    if (token) {
      defaultOptions.headers = {
        ...defaultOptions.headers,
        'Authorization': `Bearer ${token}`,
      };
    }

    try {
      console.log(`üîó API Call: ${options.method || 'GET'} ${url}`);
      
      const response = await fetch(url, defaultOptions);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || `HTTP ${response.status}: ${response.statusText}`);
      }

      console.log(`‚úÖ API Success: ${endpoint}`, data);
      return data;
    } catch (error) {
      console.error(`‚ùå API Error: ${endpoint}`, error);
      throw error;
    }
  }

  // =====================================
  // AUTHENTIFICATION DJANGO ADMIN
  // =====================================
  
  async loginDjangoAdmin(credentials: { username: string; password: string }) {
    try {
      const response = await this.makeRequest('/auth/login/', {
        method: 'POST',
        body: JSON.stringify(credentials),
      });

      if (response.success) {
        // Stocker les informations d'authentification
        localStorage.setItem('auth_token', response.token);
        localStorage.setItem('user_data', JSON.stringify(response.user));
        localStorage.setItem('user_permissions', JSON.stringify(response.permissions));
        
        console.log('üîê Django Admin Authentication Success:', response.user);
        return response;
      } else {
        throw new Error(response.error || '√âchec de l\'authentification');
      }
    } catch (error) {
      console.error('üö® Django Admin Auth Error:', error);
      throw error;
    }
  }

  // M√©thode de login g√©n√©rique (pour compatibilit√©)
  async login(credentials: { username: string; password: string }) {
    // Essayer d'abord l'authentification Django Admin
    try {
      return await this.loginDjangoAdmin(credentials);
    } catch (djangoError) {
      console.warn('Django Admin auth failed, trying fallback...', djangoError);
      throw djangoError; // Propager l'erreur pour le fallback dans le frontend
    }
  }

  async logout() {
    try {
      // Nettoyer le localStorage
      localStorage.removeItem('auth_token');
      localStorage.removeItem('user_data');
      localStorage.removeItem('user_permissions');
      
      console.log('üö™ Logout successful');
      return { success: true };
    } catch (error) {
      console.error('Logout error:', error);
      throw error;
    }
  }

  // V√©rifier si l'utilisateur est connect√© et admin
  isAuthenticated(): boolean {
    const token = localStorage.getItem('auth_token');
    const userData = localStorage.getItem('user_data');
    return !!(token && userData);
  }

  isAdmin(): boolean {
    try {
      const userData = localStorage.getItem('user_data');
      if (!userData) return false;
      
      const user = JSON.parse(userData);
      return user.is_staff || user.is_superuser || user.role === 'admin';
    } catch {
      return false;
    }
  }

  getCurrentUser() {
    try {
      const userData = localStorage.getItem('user_data');
      return userData ? JSON.parse(userData) : null;
    } catch {
      return null;
    }
  }

  getUserPermissions() {
    try {
      const permissions = localStorage.getItem('user_permissions');
      return permissions ? JSON.parse(permissions) : {};
    } catch {
      return {};
    }
  }

  // =====================================
  // API ADMIN DASHBOARD
  // =====================================

  async getAdminStats() {
    return await this.makeRequest('/admin/stats/');
  }

  async getAdminUsers() {
    return await this.makeRequest('/admin/users/');
  }

  async searchUsers(query: string) {
    return await this.makeRequest('/admin/users/search/', {
      method: 'POST',
      body: JSON.stringify({ query }),
    });
  }

  async deleteUser(userId: number) {
    return await this.makeRequest(`/admin/users/${userId}/delete/`, {
      method: 'POST',
    });
  }

  async getAdminOrders() {
    return await this.makeRequest('/admin/orders/');
  }

  // =====================================
  // API SQL DANGEREUSE (FAILLE)
  // =====================================
  
  async executeSQL(sqlQuery: string) {
    console.warn('üö® DANGER: Ex√©cution SQL directe!', sqlQuery);
    return await this.makeRequest('/admin/execute-sql/', {
      method: 'POST',
      body: JSON.stringify({ query: sqlQuery }),
    });
  }

  // =====================================
  // API PRODUITS
  // =====================================

  async getAllProducts() {
    return await this.makeRequest('/products/all/');
  }

  async getProductsStats() {
    return await this.makeRequest('/products/stats/');
  }

  // =====================================
  // API DEBUG ET TEST
  // =====================================

  async getDebugInfo() {
    return await this.makeRequest('/debug/');
  }

  async createTestData() {
    return await this.makeRequest('/create-test-data/', {
      method: 'POST',
    });
  }

  // =====================================
  // M√âTHODES UTILITAIRES
  // =====================================

  async testConnection() {
    try {
      const response = await fetch(`${this.baseURL}/debug/`);
      return response.ok;
    } catch {
      return false;
    }
  }

  // M√©thode pour v√©rifier le statut de l'API
  async getApiStatus() {
    try {
      const isConnected = await this.testConnection();
      return {
        connected: isConnected,
        baseURL: this.baseURL,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        connected: false,
        baseURL: this.baseURL,
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  // =====================================
  // LEGACY METHODS (pour compatibilit√©)
  // =====================================

  async register(userData: any) {
    return await this.makeRequest('/users/register/', {
      method: 'POST',
      body: JSON.stringify(userData),
    });
  }

  async getProducts() {
    return await this.getAllProducts();
  }

  // =====================================
  // FAILLES INTENTIONNELLES
  // =====================================

  // FAILLE: M√©thode pour exposer des informations sensibles
  async getSystemInfo() {
    console.warn('üö® FAILLE: R√©cup√©ration d\'informations syst√®me sensibles');
    return {
      localStorage_content: { ...localStorage },
      session_data: this.getCurrentUser(),
      api_endpoints: [
        '/admin/execute-sql/',
        '/admin/users/',
        '/.env',
        '/backup/'
      ],
      vulnerable_queries: [
        "admin' OR '1'='1",
        "1'; DROP TABLE auth_user; --",
        "' UNION SELECT username, password FROM auth_user --"
      ]
    };
  }

  // FAILLE: M√©thode pour tester les injections SQL
  async testSQLInjection(payload: string) {
    console.warn('üö® FAILLE: Test d\'injection SQL', payload);
    try {
      return await this.searchUsers(payload);
    } catch (error) {
      return {
        error: error.message,
        payload_tested: payload,
        suggestion: "Essayez: admin' OR '1'='1"
      };
    }
  }
}

// Instance globale
const urbanAPI = new UrbanAPI();

// Export pour utilisation dans les composants
export default urbanAPI;

// Export des types pour TypeScript
export interface LoginCredentials {
  username: string;
  password: string;
}

export interface User {
  id: number;
  username: string;
  email: string;
  first_name?: string;
  last_name?: string;
  is_staff: boolean;
  is_superuser: boolean;
  role: string;
  last_login?: string;
  date_joined: string;
}

export interface UserPermissions {
  can_add_users: boolean;
  can_delete_users: boolean;
  can_execute_sql: boolean;
  can_view_logs: boolean;
  can_manage_products: boolean;
  can_manage_orders: boolean;
}

export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

// Helper pour v√©rifications d'authentification
export const authUtils = {
  isLoggedIn: () => urbanAPI.isAuthenticated(),
  isAdmin: () => urbanAPI.isAdmin(),
  getCurrentUser: () => urbanAPI.getCurrentUser(),
  getPermissions: () => urbanAPI.getUserPermissions(),
  
  // FAILLE: Helper pour bypass d'authentification
  bypassAuth: () => {
    console.warn('üö® FAILLE: Bypass d\'authentification activ√©');
    const fakeAdmin = {
      id: 999,
      username: 'bypassed_admin',
      email: 'bypass@hack.com',
      is_staff: true,
      is_superuser: true,
      role: 'admin'
    };
    localStorage.setItem('auth_token', 'bypass_token_' + Date.now());
    localStorage.setItem('user_data', JSON.stringify(fakeAdmin));
    return fakeAdmin;
  }
};