datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

generator erd {
    provider                  = "prisma-erd-generator"
    theme                     = "forest"
    includeRelationFromFields = true
}

// main model
model User {
    id                             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                           String
    email                          String    @unique
    emailVerified                  DateTime?
    image                          String?
    profile                        String?   @unique @db.Uuid
    contacts                       String[]  @db.Uuid
    addresses                      String[]  @db.Uuid
    productReviews                 String[]  @db.Uuid
    storeReviews                   String[]  @db.Uuid
    stores                         String[]  @db.Uuid
    storeComplaints                String[]  @db.Uuid
    productWrongInformationReports String[]  @db.Uuid
    complaints                     String[]  @db.Uuid
    productQuestions               String[]  @db.Uuid
    productAnswers                 String[]  @db.Uuid
    cart                           String?   @unique @db.Uuid
    savedForLaterProducts          String?   @unique @db.Uuid
    orders                         String?   @unique @db.Uuid
    wishlists                      String[]  @db.Uuid
    othersWishlist                 String[]  @db.Uuid
    userAction                     String[]  @db.Uuid
    userNotificationProfile        String?   @db.Uuid
    userOrderRecieversId           String?   @db.Uuid
    userTypeUserTypeId             String    @db.Uuid
    UserType                       UserType  @relation(fields: [userTypeUserTypeId], references: [userTypeId])

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    userAuthentication String?   @db.Uuid
    accounts           Account[]
    sessions           Session[]
}

model Account {
    id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId            String    @db.Uuid
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?   @db.Text
    access_token      String?   @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?   @db.Text
    session_state     String?
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    deletedAt         DateTime?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    machineIdentifier    String?
    UserAuthentication   UserAuthentication? @relation(fields: [userAuthenticationId], references: [userAuthenticationId])
    userAuthenticationId String?             @db.Uuid
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    deletedAt            DateTime?
}

model UserType {
    userTypeId         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String            @unique
    Users              User[]
    OfferFor           OfferForUserType? @relation(fields: [offerForUserTypeId], references: [offerForUserTypeId])
    offerForUserTypeId String?           @db.Uuid
}

// Auth service 
model UserAuthentication {
    userAuthenticationId String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId               String             @unique @db.Uuid
    name                 String
    email                String             @unique
    emailVerified        DateTime?
    imageId              String?            @db.Uuid
    currentPasswordId    String             @unique @db.Uuid
    CurrentPassword      Password           @relation(fields: [currentPasswordId], references: [passwordId])
    PasswordHistory      PasswordHistory?
    SecurityQuestions    SecurityQuestion[]
    Session              Session[]
    // userDevices UserDevice[]
    // userLocations UserLocation[]
    // userNetworks UserNetwork[]
    LoginAttempts        LoginAttempts[]
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
}

model VerificationToken {
    identifier String
    type       String
    token      String    @id
    expires    DateTime
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

model PasswordHistory {
    passwordHistoryId    String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    Password             Password[]
    userAuthenticationId String             @unique @db.Uuid
    UserAuthentication   UserAuthentication @relation(fields: [userAuthenticationId], references: [userAuthenticationId])
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
}

model LoginAttempts {
    id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userAuthenticationId String             @db.Uuid
    UserAuthentication   UserAuthentication @relation(fields: [userAuthenticationId], references: [userAuthenticationId])
    ipAddress            String
    userAgent            String
    success              Boolean
    timestamp            DateTime           @default(now())
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
}

model Password {
    passwordId         String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    UserAuthentication UserAuthentication?
    password           String
    salt               String
    numIterations      Int
    hashingAlgorithm   String
    PasswordHistory    PasswordHistory?    @relation(fields: [passwordHistoryId], references: [passwordHistoryId])
    passwordHistoryId  String?             @db.Uuid
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    deletedAt          DateTime?
}

model SecurityQuestion {
    id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userAuthenticationId String             @db.Uuid
    UserAuthentication   UserAuthentication @relation(fields: [userAuthenticationId], references: [userAuthenticationId])
    question             String
    answer               String
    hashingAlgorithm     String
    salt                 String
    iterations           Int
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
}

// user profile service
model UserProfile {
    userProfileId    String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    /// Set some max length limit
    name             String
    dob              DateTime?
    bio              String?
    profilePictureId String?         @unique @db.Uuid
    ProfilePicture   ProfilePicture? @relation(fields: [profilePictureId], references: [profilePictureId])
    userId           String          @unique @db.Uuid
    genderId         String?         @db.Uuid
    Gender           Gender?         @relation(fields: [genderId], references: [id])
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    deletedAt        DateTime?
}

model ProfilePicture {
    profilePictureId String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    mediaId          String       @unique @db.Uuid
    UserProfile      UserProfile?
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    deletedAt        DateTime?
}

model UserNotificationProfile {
    userNotificationProfileId String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId                    String                       @unique @db.Uuid
    Preferences               UserNotificationPreference[]
    createdAt                 DateTime                     @default(now())
    updatedAt                 DateTime                     @updatedAt
    deletedAt                 DateTime?
}

model UserNotificationPreference {
    userNotificationId                String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    // mail, number ,etc
    NotificationType                  UserNotificationPreferenceType  @relation(fields: [userNotificationPreferenceTypeId], references: [id])
    // Can be different levels
    PreferenceLevel                   UserNotificationPreferenceLevel @relation(fields: [userNotificationPreferenceLevelId], references: [id])
    createdAt                         DateTime                        @default(now())
    updatedAt                         DateTime                        @updatedAt
    deletedAt                         DateTime?
    UserNotificationProfile           UserNotificationProfile?        @relation(fields: [userNotificationProfileId], references: [userNotificationProfileId])
    userNotificationProfileId         String?                         @db.Uuid
    userNotificationPreferenceTypeId  String                          @db.Uuid
    userNotificationPreferenceLevelId String                          @db.Uuid
}

model UserNotificationPreferenceType {
    id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                       String                       @unique
    createdAt                  DateTime                     @default(now())
    updatedAt                  DateTime                     @updatedAt
    deletedAt                  DateTime?
    UserNotificationPreference UserNotificationPreference[]
}

model UserNotificationPreferenceLevel {
    id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    level                      Int                          @unique
    Events                     UserNotificationEvents[]
    createdAt                  DateTime                     @default(now())
    updatedAt                  DateTime                     @updatedAt
    deletedAt                  DateTime?
    UserNotificationPreference UserNotificationPreference[]
}

// added something to cart, bought something , somrthong back in stock, price decreased, etc
model UserNotificationEvents {
    id                                String                           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                              String                           @unique
    createdAt                         DateTime                         @default(now())
    updatedAt                         DateTime                         @updatedAt
    deletedAt                         DateTime?
    UserNotificationPreferenceLevel   UserNotificationPreferenceLevel? @relation(fields: [userNotificationPreferenceLevelId], references: [id])
    userNotificationPreferenceLevelId String?                          @db.Uuid
}

model UserOrderRecievers {
    userOrderRecieversId String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    UserOrderRecievers   UserOrderReciever[]
    userId               String              @unique @db.Uuid
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    deletedAt            DateTime?
}

model UserOrderReciever {
    userOrderRecieverId                    String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                                   String
    Contacts                               UserOrderRecieverContact[]
    createdAt                              DateTime                   @default(now())
    updatedAt                              DateTime                   @updatedAt
    deletedAt                              DateTime?
    UserOrderRecievers                     UserOrderRecievers?        @relation(fields: [userOrderRecieversUserOrderRecieversId], references: [userOrderRecieversId])
    userOrderRecieversUserOrderRecieversId String?                    @db.Uuid
}

model UserOrderRecieverContact {
    userOrderRecieverContactId     String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    contact                        String
    ContactType                    UserOrderRecieverContactType @relation(fields: [userOrderRecieverContactTypeId], references: [id])
    userOrderRecieverContactTypeId String                       @db.Uuid
    createdAt                      DateTime                     @default(now())
    updatedAt                      DateTime                     @updatedAt
    deletedAt                      DateTime?
    UserOrderReciever              UserOrderReciever?           @relation(fields: [userOrderRecieverId], references: [userOrderRecieverId])
    userOrderRecieverId            String?                      @db.Uuid
}

model UserOrderRecieverContactType {
    id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                     String                     @unique
    createdAt                DateTime                   @default(now())
    updatedAt                DateTime                   @updatedAt
    deletedAt                DateTime?
    UserOrderRecieverContact UserOrderRecieverContact[]
}

model Gender {
    id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String        @unique
    UserProfiles UserProfile[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    deletedAt    DateTime?
}

// user address service
model UserAddress {
    userAddressId       String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    line1               String
    line2               String?           @default("")
    zipcode             String
    cityId              String            @db.Uuid
    City                City              @relation(fields: [cityId], references: [cityId])
    latitudeLongitudeId String            @db.Uuid
    LatitudeLongitude   LatitudeLongitude @relation(fields: [latitudeLongitudeId], references: [latitudeLongitudeId])
    userId              String?           @db.Uuid
    AddressType         UserAddressType?  @relation(fields: [userAddressTypeId], references: [userAddressTypeId])
    userAddressTypeId   String?           @db.Uuid
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt
    deletedAt           DateTime?
}

/// Address type can be home, office, billing, contact, etc.
model UserAddressType {
    userAddressTypeId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name              String        @unique
    UserAddresses     UserAddress[]
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    deletedAt         DateTime?
}

// Complaint service

model Complaint {
    complaintId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId      String    @db.Uuid
    message     String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
}

model StoreComplaint {
    storeComplaintId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId           String    @db.Uuid
    message          String
    storeStoreId     String?   @db.Uuid
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    deletedAt        DateTime?
}

model ProductWrongInformationReportsCombinedResult {
    productWrongInformationReportsOverallId String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productId                               String                          @unique @db.Uuid
    count                                   Int
    ProductWrongInformationReports          ProductWrongInformationReport[]
    createdAt                               DateTime                        @default(now())
    updatedAt                               DateTime                        @updatedAt
    deletedAt                               DateTime?
}

model ProductWrongInformationReport {
    productWrongInformationReportId                String                                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                                           String
    message                                        String
    userId                                         String                                        @db.Uuid
    productWrongInformationReportsCombinedResultId String?                                       @db.Uuid
    ProductWrongInformationReportsCombinedResult   ProductWrongInformationReportsCombinedResult? @relation(fields: [productWrongInformationReportsCombinedResultId], references: [productWrongInformationReportsOverallId])
    productProductId                               String?                                       @db.Uuid
    createdAt                                      DateTime                                      @default(now())
    updatedAt                                      DateTime                                      @updatedAt
    deletedAt                                      DateTime?
}

// user contact service
model UserContact {
    userContactId String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    contact       String
    userId        String          @db.Uuid
    ContactType   UserContactType @relation(fields: [contactTypeId], references: [id])
    contactTypeId String          @db.Uuid
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    deletedAt     DateTime?
}

/// Types can be primary email, secondary email, primary phone, secondary phone, twitter, etc.
model UserContactType {
    id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String        @unique
    UserContact UserContact[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    deletedAt   DateTime?
}

// Cart service
model Cart {
    cartId    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId    String     @unique @db.Uuid
    Items     CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    deletedAt DateTime?
}

model CartItem {
    cartItemId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    cartId     String    @db.Uuid
    Cart       Cart      @relation(fields: [cartId], references: [cartId])
    productId  String    @db.Uuid
    quantity   Int
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

// Saved for latter service
model SavedForLaterProducts {
    savedForLaterProductsId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId                  String    @unique @db.Uuid
    products                String[]  @db.Uuid
    createdAt               DateTime  @default(now())
    updatedAt               DateTime  @updatedAt
    deletedAt               DateTime?
}

// Wishlist service

model Wishlist {
    wishlistId        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name              String
    description       String
    WishlistAddresses WishlistAddress[]
    Products          WishlistItem[]
    authorizedUserIds String[]          @db.Uuid
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt
    deletedAt         DateTime?
    userId            String?           @db.Uuid
}

model WishlistItem {
    wishlistItemId       String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    wishlistId           String             @db.Uuid
    Wishlist             Wishlist           @relation(fields: [wishlistId], references: [wishlistId])
    productId            String             @db.Uuid
    wishlistItemStatusId String             @db.Uuid
    Status               WishlistItemStatus @relation(fields: [wishlistItemStatusId], references: [wishlistItemStatusId])
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    deletedAt            DateTime?
}

model WishlistItemStatus {
    wishlistItemStatusId String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    WishlistItem         WishlistItem[]
    status               String         @unique
    createdAt            DateTime       @default(now())
    updatedAt            DateTime       @updatedAt
    deletedAt            DateTime?
}

model WishlistAddress {
    wishlistAddressId     String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    line1                 String
    line2                 String?             @default("")
    zipcode               String
    cityId                String              @db.Uuid
    City                  City                @relation(fields: [cityId], references: [cityId])
    latitudeLongitudeId   String              @db.Uuid
    LatitudeLongitude     LatitudeLongitude   @relation(fields: [latitudeLongitudeId], references: [latitudeLongitudeId])
    AddressType           WishlistAddressType @relation(fields: [wishlistAddressTypeId], references: [wishlistAddressTypeId])
    wishlistAddressTypeId String              @db.Uuid
    createdAt             DateTime            @default(now())
    updatedAt             DateTime            @updatedAt
    deletedAt             DateTime?
    Wishlist              Wishlist[]
}

model WishlistAddressType {
    wishlistAddressTypeId String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                  String            @unique
    createdAt             DateTime          @default(now())
    updatedAt             DateTime          @updatedAt
    deletedAt             DateTime?
    WishlistAddress       WishlistAddress[]
}

// Order service

model Orders {
    ordersId   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId     String      @unique @db.Uuid
    OrderItems OrderItem[]
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    deletedAt  DateTime?
}

model OrderItem {
    orderItemId          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    ordersId             String           @db.Uuid
    Order                Orders           @relation(fields: [ordersId], references: [ordersId])
    productId            String           @db.Uuid
    DeliveryAddress      OrderAddress     @relation(fields: [orderAddressId], references: [orderAddressId])
    User                 OrderUser        @relation(fields: [orderUserOrderUserId], references: [orderUserId])
    orderUserOrderUserId String           @unique @db.Uuid
    Reciever             OrderReciever    @relation(fields: [orderRecieverId], references: [orderRecieverId])
    orderRecieverId      String           @unique @db.Uuid
    amount               Float
    quantity             Int
    OrderStatus          OrderStatus      @relation(fields: [orderStatusId], references: [orderStatusId])
    orderStatusId        String           @db.Uuid
    Payment              Payment[]
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
    deletedAt            DateTime?
    DeliveryTracker      DeliveryTracker?
    orderAddressId       String           @db.Uuid
}

model OrderUser {
    orderUserId String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String
    email       String
    // Add other info as required according to laws
    OrderItem   OrderItem?
    // Contact     OrderUserContact[]
    Contact     String
}

// model OrderUserContact {
//     userOrderRecieverContactId String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//     contact                    String
//     ContactType                OrderUserContactType @relation(fields: [orderUserContactTypeId], references: [orderUserContactTypeId])
//     orderUserContactTypeId     String               @db.Uuid
//     createdAt                  DateTime             @default(now())
//     updatedAt                  DateTime             @updatedAt
//     deletedAt                  DateTime?
//     OrderUser                  OrderUser            @relation(fields: [orderUserId], references: [orderUserId])
//     orderUserId                String               @db.Uuid
// }

// model OrderUserContactType {
//     orderUserContactTypeId String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//     name                   String             @unique
//     createdAt              DateTime           @default(now())
//     updatedAt              DateTime           @updatedAt
//     deletedAt              DateTime?
//     OrderRecieverContact   OrderUserContact[]
// }

model OrderReciever {
    orderRecieverId String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String
    // Contacts        OrderRecieverContact[]
    Contact         String
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    deletedAt       DateTime?
    OrderItem       OrderItem?
}

// model OrderRecieverContact {
//     userOrderRecieverContactId String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//     contact                    String
//     orderRecieverContactType   OrderRecieverContactType @relation(fields: [orderRecieverContactTypeId], references: [orderRecieverContactTypeId])
//     orderRecieverContactTypeId String                   @db.Uuid
//     createdAt                  DateTime                 @default(now())
//     updatedAt                  DateTime                 @updatedAt
//     deletedAt                  DateTime?
//     OrderReciever              OrderReciever?           @relation(fields: [orderRecieverId], references: [orderRecieverId])
//     orderRecieverId            String?                  @db.Uuid
// }

// model OrderRecieverContactType {
//     orderRecieverContactTypeId String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//     name                       String                 @unique
//     createdAt                  DateTime               @default(now())
//     updatedAt                  DateTime               @updatedAt
//     deletedAt                  DateTime?
//     OrderRecieverContact       OrderRecieverContact[]
// }

model OrderAddress {
    orderAddressId      String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    line1               String
    line2               String?           @default("")
    zipcode             String
    cityId              String            @db.Uuid
    City                City              @relation(fields: [cityId], references: [cityId])
    latitudeLongitudeId String            @db.Uuid
    LatitudeLongitude   LatitudeLongitude @relation(fields: [latitudeLongitudeId], references: [latitudeLongitudeId])
    AddressType         OrderAddressType  @relation(fields: [orderAddressTypeId], references: [orderAddressTypeId])
    orderAddressTypeId  String            @db.Uuid
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt
    deletedAt           DateTime?
    OrderItem           OrderItem[]
}

model OrderAddressType {
    orderAddressTypeId String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String         @unique
    createdAt          DateTime       @default(now())
    updatedAt          DateTime       @updatedAt
    deletedAt          DateTime?
    OrderAddress       OrderAddress[]
}

model OrderStatus {
    orderStatusId String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String      @unique
    Order         OrderItem[]
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    deletedAt     DateTime?
}

model PaymentMethod {
    paymentMethodId                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                               String
    Payment                            Payment[]
    productProductId                   String?           @db.Uuid
    createdAt                          DateTime          @default(now())
    updatedAt                          DateTime          @updatedAt
    deletedAt                          DateTime?
    ProductInventory                   ProductInventory? @relation(fields: [productInventoryProductInventoryId], references: [productInventoryId])
    productInventoryProductInventoryId String?           @db.Uuid
}

model Payment {
    paymentId                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    amount                       Float
    PaymentMethod                PaymentMethod @relation(fields: [paymentMethodPaymentMethodId], references: [paymentMethodId])
    paymentMethodId              String        @db.Uuid
    PaymentStatus                PaymentStatus @relation(fields: [paymentStatusPaymentStatusId], references: [paymentStatusId])
    paymentStatusId              String        @db.Uuid
    PaymentType                  PaymentType   @relation(fields: [paymentTypePaymentTypeId], references: [paymentTypeId])
    paymentTypeId                String        @db.Uuid
    paymentMethodPaymentMethodId String        @db.Uuid
    paymentStatusPaymentStatusId String        @db.Uuid
    paymentTypePaymentTypeId     String        @db.Uuid
    OrderItem                    OrderItem     @relation(fields: [orderItemId], references: [orderItemId])
    orderItemId                  String        @db.Uuid
    createdAt                    DateTime      @default(now())
    updatedAt                    DateTime      @updatedAt
    deletedAt                    DateTime?
}

model PaymentStatus {
    paymentStatusId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String
    Payment         Payment[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    deletedAt       DateTime?
}

model PaymentType {
    paymentTypeId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String
    Payment       Payment[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    deletedAt     DateTime?
}

model ProductInventory {
    productInventoryId String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    storeId            String          @db.Uuid
    price              Float
    stock              Int
    sold               Int
    comingSoon         Int
    productId          String          @db.Uuid
    PaymentMethods     PaymentMethod[]
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    deletedAt          DateTime?

    @@unique([storeId, productId])
}

model DeliveryRoute {
    deliveryRouteId String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    Warehouse       String[]         @db.Uuid
    DeliveryTracker DeliveryTracker?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    deletedAt       DateTime?
}

/// Out for delivery, Delivered, In transit, Pending, Cancelled
model DeliveryStatus {
    deliveryStatusId String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    status           String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    deletedAt        DateTime?
    DeliveryTracker  DeliveryTracker[]
}

model DeliveryTracker {
    id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    orderItemId      String         @unique @db.Uuid
    Order            OrderItem      @relation(fields: [orderItemId], references: [orderItemId])
    Route            DeliveryRoute? @relation(fields: [deliveryRouteId], references: [deliveryRouteId])
    deliveryRouteId  String?        @unique @db.Uuid
    Status           DeliveryStatus @relation(fields: [deliveryStatusId], references: [deliveryStatusId])
    deliveryAgentId  String         @db.Uuid
    deliveryStatusId String         @db.Uuid
    warehouseId      String         @db.Uuid
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    deletedAt        DateTime?
}

// Analysis and tracking service
// Types of a action, can be unregistered user, registered user, etc.
// It contains a json data object, that can be used to store data about the action, in a non-constrained schema
model Action {
    actionId     String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    identifier   String
    Type         ActionType @relation(fields: [actionTypeId], references: [actionTypeId])
    createdAt    DateTime   @default(now())
    dataObject   Json
    updatedAt    DateTime   @updatedAt
    deletedAt    DateTime?
    actionTypeId String     @db.Uuid
}

model UserAction {
    userActionId String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId       String     @db.Uuid
    Type         ActionType @relation(fields: [actionTypeId], references: [actionTypeId])
    dataObject   Json
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    deletedAt    DateTime?
    actionTypeId String     @db.Uuid
}

model ActionType {
    actionTypeId String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    Type         String       @unique
    Actions      Action[]
    UserActions  UserAction[]
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    deletedAt    DateTime?
}

// share links tracking, etc
model Links {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// newspaper service
model NewsletterSubscribedUser {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//Offer service
// Offers for products and its subtypes
model Offer {
    offerId          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productId        String             @db.Uuid
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    deletedAt        DateTime?
    OfferForInterval OfferForInterval[]
    OfferForRegion   OfferForRegion[]
    OfferForUserType OfferForUserType[]
}

model OfferForInterval {
    offerForIntervalId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    offerId            String    @db.Uuid
    Offer              Offer     @relation(fields: [offerId], references: [offerId])
    startTime          DateTime
    endTime            DateTime
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    deletedAt          DateTime?
}

model OfferForRegion {
    offerForRegionId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    offerId          String    @db.Uuid
    Offer            Offer     @relation(fields: [offerId], references: [offerId])
    targetRegionIds  String[]  @db.Uuid
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    deletedAt        DateTime?
}

model OfferForUserType {
    offerForUserTypeId String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    offerId            String     @db.Uuid
    Offer              Offer      @relation(fields: [offerId], references: [offerId])
    TargetUserType     UserType[]
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    deletedAt          DateTime?
}

// Internal service, company work
model Employee {
    employeeId         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String
    email              String            @unique
    password           String
    Position           EmployeePosition  @relation(fields: [employeePositionId], references: [id])
    addressId          String?           @db.Uuid
    Address            EmployeeAddress[]
    salary             Int
    Department         Department        @relation(fields: [departmentID], references: [departmentId])
    departmentID       String            @db.Uuid
    iamgeId            String?           @db.Uuid
    employeePositionId String            @db.Uuid
    DeliveryAgent      DeliveryAgent?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model EmployeeAddress {
    employeeAddressId     String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    line1                 String
    line2                 String?              @default("")
    zipcode               String
    cityId                String               @db.Uuid
    City                  City                 @relation(fields: [cityId], references: [cityId])
    latitudeLongitudeId   String               @db.Uuid
    LatitudeLongitude     LatitudeLongitude    @relation(fields: [latitudeLongitudeId], references: [latitudeLongitudeId])
    employeeId            String?              @db.Uuid
    Employee              Employee?            @relation(fields: [employeeId], references: [employeeId])
    AddressType           EmployeeAddressType? @relation(fields: [employeeAddressTypeId], references: [employeeAddressTypeId])
    employeeAddressTypeId String?              @db.Uuid
    createdAt             DateTime             @default(now())
    updatedAt             DateTime             @updatedAt
    deletedAt             DateTime?
}

/// Address type can be home, office, billing, contact, etc.
model EmployeeAddressType {
    employeeAddressTypeId String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                  String            @unique
    EmployeeAddresses     EmployeeAddress[]
    createdAt             DateTime          @default(now())
    updatedAt             DateTime          @updatedAt
    deletedAt             DateTime?
}

model EmployeePosition {
    id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    position    String
    description String
    Employee    Employee[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    deletedAt   DateTime?
}

model Department {
    departmentId   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    departmentName String
    description    String
    Employee       Employee[]
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    deletedAt      DateTime?
}

model DeliveryAgent {
    deliveryAgentId String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    employeeId      String                 @unique @db.Uuid
    Employee        Employee               @relation(fields: [employeeId], references: [employeeId])
    Contact         DeliveryAgentContact[]
    DeliveryTracker String[]               @db.Uuid

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model DeliveryAgentContact {
    deliveryAgentContactId String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    deliveryAgentId        String?        @db.Uuid
    DeliveryAgent          DeliveryAgent? @relation(fields: [deliveryAgentId], references: [deliveryAgentId])
    contact                String
    createdAt              DateTime       @default(now())
    updatedAt              DateTime       @updatedAt
    deletedAt              DateTime?
}

model Warehouse {
    warehouseId     String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String
    Address         WarehouseAddress?
    DeliveryTracker String[]          @db.Uuid
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    deletedAt       DateTime?
}

model WarehouseAddress {
    warehouseAddressId     String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    line1                  String
    line2                  String?               @default("")
    zipcode                String
    cityId                 String                @db.Uuid
    City                   City                  @relation(fields: [cityId], references: [cityId])
    latitudeLongitudeId    String                @db.Uuid
    latitudeLongitude      LatitudeLongitude     @relation(fields: [latitudeLongitudeId], references: [latitudeLongitudeId])
    Warehouse              Warehouse             @relation(fields: [warehouseId], references: [warehouseId])
    warehouseId            String                @unique @db.Uuid
    AddressType            WarehouseAddressType? @relation(fields: [warehouseAddressTypeId], references: [warehouseAddressTypeId])
    warehouseAddressTypeId String?               @db.Uuid
    createdAt              DateTime              @default(now())
    updatedAt              DateTime              @updatedAt
    deletedAt              DateTime?
}

model WarehouseAddressType {
    warehouseAddressTypeId String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    addressType            String
    WarehouseAddress       WarehouseAddress[]
    createdAt              DateTime           @default(now())
    updatedAt              DateTime           @updatedAt
    deletedAt              DateTime?
}

// fetauredPost Service

model Post {
    postId      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title       String
    description String
    url         String
    Media       PostMedia[]
    tags        PostTag[]
    featured    Boolean     @default(false)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    deletedAt   DateTime?
}

model PostTag {
    tagId     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    Post      Post?     @relation(fields: [postId], references: [postId])
    postId    String?   @db.Uuid
}

model PostMedia {
    postMediaId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    mediaId     String    @db.Uuid
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
    Post        Post?     @relation(fields: [postId], references: [postId])
    postId      String?   @db.Uuid
}

// Banner Service

model Banner {
    bannerId    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title       String
    description String
    query       String?
    productIds  String[]      @db.Uuid
    Media       BannerMedia[]
    tags        BannerTag[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    deletedAt   DateTime?
}

model BannerTag {
    tagId     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    Banner    Banner?   @relation(fields: [bannerId], references: [bannerId])
    bannerId  String?   @db.Uuid
}

model BannerMedia {
    bannerMediaId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    mediaId       String    @db.Uuid
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    deletedAt     DateTime?
    Banner        Banner?   @relation(fields: [bannerId], references: [bannerId])
    bannerId      String?   @db.Uuid
}

// Favourite Product Service

model FavouriteProduct {
    favouriteProductId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String
    productId          String    @db.Uuid
    categoryId         String?   @db.Uuid
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    deletedAt          DateTime?

    @@unique([productId, categoryId])
}

// brand service

model Brand {
    brandId   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name      String       @unique
    Products  String[]     @db.Uuid
    Media     BrandMedia[]
    Tags      BrandTag[]
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    deletedAt DateTime?
}

model BrandMedia {
    brandMediaId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    brandId      String    @db.Uuid
    Brand        Brand     @relation(fields: [brandId], references: [brandId])
    mediaId      String    @db.Uuid
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?
}

model BrandTag {
    brandTagId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name       String
    Brand      Brand[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

// Media service
model Media {
    mediaId              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    url                  String
    altText              String
    ownerId              String    @db.Uuid
    Type                 MediaType @relation(fields: [mediaTypeMediaTypeId], references: [mediaTypeId])
    mediaTypeMediaTypeId String    @db.Uuid
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt
    deletedAt            DateTime?
}

model MediaType {
    mediaTypeId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String    @unique
    Media       Media[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
}

// Store service
model Store {
    storeId         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String
    userId          String         @db.Uuid
    description     String
    Contacts        StoreContact[]
    Media           StoreMedia[]
    Addresses       StoreAddress[]
    Products        String[]       @db.Uuid
    Tags            StoreTag[]
    Reviews         String[]       @db.Uuid
    CombinedReview  String?        @db.Uuid
    StoreComplaints String[]       @db.Uuid
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    deletedAt       DateTime?
}

model StoreAddress {
    storeAddressId      String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    line1               String
    line2               String?           @default("")
    zipcode             String
    cityId              String            @db.Uuid
    City                City              @relation(fields: [cityId], references: [cityId])
    latitudeLongitudeId String            @db.Uuid
    LatitudeLongitude   LatitudeLongitude @relation(fields: [latitudeLongitudeId], references: [latitudeLongitudeId])
    storeId             String            @db.Uuid
    Store               Store             @relation(fields: [storeId], references: [storeId])
    AddressType         StoreAddressType? @relation(fields: [storeAddressTypeId], references: [storeAddressTypeId])
    storeAddressTypeId  String?           @db.Uuid
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt
    deletedAt           DateTime?
}

model StoreAddressType {
    storeAddressTypeId String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String         @unique
    StoreAddress       StoreAddress[]
    createdAt          DateTime       @default(now())
    updatedAt          DateTime       @updatedAt
    deletedAt          DateTime?
}

model StoreContact {
    storeContactId String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    contact        String
    Store          Store?            @relation(fields: [storeID], references: [storeId])
    storeID        String?           @db.Uuid
    ContactType    StoreContactType? @relation(fields: [contactTypeId], references: [id])
    contactTypeId  String?           @db.Uuid
    createdAt      DateTime          @default(now())
    updatedAt      DateTime          @updatedAt
    deletedAt      DateTime?
}

/// Types can be primary email, secondary email, primary phone, secondary phone, twitter, etc.
model StoreContactType {
    id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String         @unique
    UserContacts StoreContact[]
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    deletedAt    DateTime?
}

model StoreTag {
    id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name      String    @unique
    Stores    Store[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model StoreMedia {
    id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    storeId   String    @db.Uuid
    Store     Store     @relation(fields: [storeId], references: [storeId])
    mediaId   String    @db.Uuid
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

// Review Service

model StoreReviewsCombinedResult {
    storeReviewCombinedResultsId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    storeId                      String        @unique @db.Uuid
    rating                       Float
    reviewCount                  Int
    StoreReviews                 StoreReview[]
    createdAt                    DateTime      @default(now())
    updatedAt                    DateTime      @updatedAt
    deletedAt                    DateTime?
}

model StoreReview {
    storeReviewId                 String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId                        String                      @db.Uuid
    storeId                       String                      @db.Uuid
    rating                        Float
    Media                         StoreReviewMedia[]
    Tags                          StoreReviewTag[]
    content                       String?
    StoreReviewsCombinedResult    StoreReviewsCombinedResult? @relation(fields: [storeReviewsCombinedResultsId], references: [storeReviewCombinedResultsId])
    storeReviewsCombinedResultsId String?                     @db.Uuid
    createdAt                     DateTime                    @default(now())
    updatedAt                     DateTime                    @updatedAt
    deletedAt                     DateTime?
}

model StoreReviewTag {
    storeReviewTagId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    StoreReview      StoreReview[]
    tag              String        @unique
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
    deletedAt        DateTime?
}

model StoreReviewMedia {
    storeReviewMediaId String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    mediaId            String      @db.Uuid
    storeReviewId      String      @db.Uuid
    StoreReview        StoreReview @relation(fields: [storeReviewId], references: [storeReviewId])
    createdAt          DateTime    @default(now())
    updatedAt          DateTime    @updatedAt
    deletedAt          DateTime?
}

// Product Service
model Category {
    categoryId       String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name             String          @unique
    description      String
    tags             CategoryTag[]
    media            CategoryMedia[]
    parentCatetoryId String?         @db.Uuid
    ParentCategory   Category?       @relation("SubCategories", fields: [parentCatetoryId], references: [categoryId])
    subCategory      Category[]      @relation("SubCategories")
    Products         Product[]
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    deletedAt        DateTime?
}

model CategoryTag {
    categoryTagId String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String     @unique
    Categories    Category[]
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    deletedAt     DateTime?
}

model CategoryMedia {
    id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    mediaId    String    @db.Uuid
    categoryId String    @db.Uuid
    Category   Category  @relation(fields: [categoryId], references: [categoryId])
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

model Product {
    productId                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                          String
    description                   String
    Details                       ProductDetail[]
    createdAt                     DateTime                 @default(now())
    updatedAt                     DateTime                 @updatedAt
    deletedAt                     DateTime?
    Media                         ProductMedia[]
    Reviews                       String[]                 @db.Uuid
    Questions                     String[]                 @db.Uuid
    giftOptionAvailable           Boolean
    WrongInformationReports       String[]                 @db.Uuid
    OverallWrongInformationResult String?                  @db.Uuid
    ///  denotes the number of days that it can be replaced, 0 means cant be replaced
    /// same for return frame
    replaceFrame                  Int
    returnFrame                   Int
    // ptag is reduntant but allows for faster query to get tags of a product
    ptags                         String[]
    Tags                          ProductTag[]
    brandId                       String?                  @db.Uuid
    TechnicalDetails              ProductTechnicalDetail[]
    ProductReviewsCombinedResult  String?                  @db.Uuid
    ProductReviewFeature          String[]                 @db.Uuid
    Category                      Category?                @relation(fields: [categoryCategoryId], references: [categoryId])
    categoryCategoryId            String?                  @db.Uuid
    ProductVariantBasis           ProductVariantBasis[]
    ProductSKU                    ProductSKU[]
    originalStoreId               String                   @db.Uuid
}

// decide whether to have it connected to category or products, who gonna decide these, etc
model ProductVariantBasis {
    productVariantBasisId  String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    variantBasisName       String
    Products               Product[]
    ProductVariantInstance ProductVariantInstance[]
}

model ProductVariantInstance {
    productVariantInstanceId String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    variantInstanceName      String
    Basis                    ProductVariantBasis[]
    ProductSKU               ProductSKU[]
}

model ProductSKU {
    productSKUId           String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productId              String                   @db.Uuid
    Product                Product                  @relation(fields: [productId], references: [productId])
    skuName                String
    // Not used, add in backend
    Media                  ProductMedia[]
    originalStoreId        String                   @db.Uuid
    productInventoryIds    String[]                 @db.Uuid
    productVariantInstance ProductVariantInstance[]
    // Just for faster searching, the price defined in productInventory model is final
    price                  Float
    stock                  Int                      @default(1) // remove default value, just for development
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    deletedAt              DateTime?
}

model ProductMedia {
    productMediaId         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productId              String?     @db.Uuid
    Product                Product?    @relation(fields: [productId], references: [productId])
    mediaId                String      @db.Uuid
    createdAt              DateTime    @default(now())
    updatedAt              DateTime    @updatedAt
    deletedAt              DateTime?
    ProductSKU             ProductSKU? @relation(fields: [productSKUProductSKUId], references: [productSKUId])
    productSKUProductSKUId String?     @db.Uuid
}

model ProductTag {
    productTagId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String    @unique
    Product      Product[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?
}

model ProductDetail {
    productDetailId  String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    heading          String
    description      String
    Media            ProductDescriptionMedia[]
    Product          Product?                  @relation(fields: [productProductId], references: [productId])
    productProductId String?                   @db.Uuid
    createdAt        DateTime                  @default(now())
    updatedAt        DateTime                  @updatedAt
    deletedAt        DateTime?
}

model ProductDescriptionMedia {
    productDescriptionMediaId      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productDescriptionId           String        @db.Uuid
    mediaId                        String        @db.Uuid
    ProductDescriptionSingleEntity ProductDetail @relation(fields: [productDescriptionId], references: [productDetailId])
    createdAt                      DateTime      @default(now())
    updatedAt                      DateTime      @updatedAt
    deletedAt                      DateTime?
}

model ProductTechnicalDetail {
    technicalDetailId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    key               String
    value             String
    productId         String    @db.Uuid
    Product           Product   @relation(fields: [productId], references: [productId])
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    deletedAt         DateTime?
}

// Question answer service
model ProductQuestion {
    productQuestionId String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId            String                 @db.Uuid
    productId         String                 @db.Uuid
    upvotes           Int                    @default(0)
    downvotes         Int                    @default(0)
    content           String
    Media             ProductQuestionMedia[]
    Answers           ProductAnswer[]
    createdAt         DateTime               @default(now())
    updatedAt         DateTime               @updatedAt
    deletedAt         DateTime?
}

model ProductQuestionMedia {
    productQuestionMediaId String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    questionId             String          @db.Uuid
    Question               ProductQuestion @relation(fields: [questionId], references: [productQuestionId])
    mediaId                String          @db.Uuid
    createdAt              DateTime        @default(now())
    updatedAt              DateTime        @updatedAt
    deletedAt              DateTime?
}

model ProductAnswer {
    productAnswerId   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId            String               @db.Uuid
    questionId        String               @db.Uuid
    upvotes           Int                  @default(0)
    downvotes         Int                  @default(0)
    content           String
    Media             ProductAnswerMedia[]
    Question          ProductQuestion      @relation(fields: [questionId], references: [productQuestionId])
    productQuestionId String?              @db.Uuid
    createdAt         DateTime             @default(now())
    updatedAt         DateTime             @updatedAt
    deletedAt         DateTime?
}

model ProductAnswerMedia {
    productAnswerMediaId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    answerId             String        @db.Uuid
    Answer               ProductAnswer @relation(fields: [answerId], references: [productAnswerId])
    mediaId              String        @db.Uuid
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt
    deletedAt            DateTime?
}

// product review service

model ProductReviewsCombinedResult {
    productReviewsCombinedResultId String                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    rating                         Float
    // add a count for reviews number at values like 1, 2 , 3, 4, 5
    reviewsCount                   Int                                   @default(0)
    reviewCount1Star               Int                                   @default(0)
    reviewCount2Star               Int                                   @default(0)
    reviewCount3Star               Int                                   @default(0)
    reviewCount4Star               Int                                   @default(0)
    reviewCount5Star               Int                                   @default(0)
    Features                       ProductFeaturesRatingCombinedResult[]
    productId                      String                                @unique @db.Uuid
    productReviews                 ProductReview[]
    createdAt                      DateTime                              @default(now())
    updatedAt                      DateTime                              @updatedAt
    deletedAt                      DateTime?
}

model ProductFeaturesRatingCombinedResult {
    productFeatureRatingCombinedResultsId String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    rating                                Float
    reviewsCount                          Int
    featureId                             String                       @db.Uuid
    Feature                               ProductReviewFeature         @relation(fields: [featureId], references: [productReviewFeatureId])
    productReviewsCombinedResultId        String                       @db.Uuid
    ProductReviewsCombinedResults         ProductReviewsCombinedResult @relation(fields: [productReviewsCombinedResultId], references: [productReviewsCombinedResultId])
    createdAt                             DateTime                     @default(now())
    updatedAt                             DateTime                     @updatedAt
    deletedAt                             DateTime?
}

model ProductReview {
    productReviewId                String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productId                      String                        @db.Uuid
    userId                         String                        @db.Uuid
    /// In range of 0 to 5, using check constraint in migrate file
    overallRating                  Float
    content                        String
    Features                       ProductReviewFeatureRating[]
    Tags                           ProductReviewTag[]
    Media                          ProductReviewMedia[]
    verifiedPurchase               Boolean                       @default(false)
    ProductReviewsCombinedResult   ProductReviewsCombinedResult? @relation(fields: [productReviewsCombinedResultId], references: [productReviewsCombinedResultId])
    productReviewsCombinedResultId String?                       @db.Uuid
    createdAt                      DateTime                      @default(now())
    updatedAt                      DateTime                      @updatedAt
    deletedAt                      DateTime?

    @@unique([productId, userId])
}

model ProductReviewTag {
    productReviewTagId String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    tag                String          @unique
    ProductReview      ProductReview[]
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    deletedAt          DateTime?
}

model ProductReviewMedia {
    productReviewMediaId String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    mediaId              String        @db.Uuid
    productReviewId      String        @db.Uuid
    ProductReview        ProductReview @relation(fields: [productReviewId], references: [productReviewId])
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt
    deletedAt            DateTime?
}

model ProductReviewFeatureRating {
    productReviewFeatureId String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    productReviewId        String               @db.Uuid
    ProductReview          ProductReview        @relation(fields: [productReviewId], references: [productReviewId])
    featureId              String               @db.Uuid
    Feature                ProductReviewFeature @relation(fields: [featureId], references: [productReviewFeatureId])
    rating                 Float
    createdAt              DateTime             @default(now())
    updatedAt              DateTime             @updatedAt
    deletedAt              DateTime?
}

model ProductReviewFeature {
    productReviewFeatureId              String                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    description                         String
    productId                           String                                @db.Uuid
    Type                                ProductReviewFeatureType              @relation(fields: [productReviewFeatureTypeId], references: [type])
    Ratings                             ProductReviewFeatureRating[]
    ProductFeaturesRatingCombinedResult ProductFeaturesRatingCombinedResult[]
    productReviewFeatureTypeId          String                                @db.Uuid
    createdAt                           DateTime                              @default(now())
    updatedAt                           DateTime                              @updatedAt
    deletedAt                           DateTime?
}

model ProductReviewFeatureType {
    type                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    ProductReviewFeature ProductReviewFeature[]
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
    deletedAt            DateTime?
}

// general address tables

model LatitudeLongitude {
    latitudeLongitudeId String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    lat                 Float
    long                Float
    userAddress         UserAddress[]
    WarehouseAddress    WarehouseAddress[]
    createdAt           DateTime           @default(now())
    updatedAt           DateTime           @updatedAt
    deletedAt           DateTime?
    EmployeeAddress     EmployeeAddress[]
    StoreAddress        StoreAddress[]
    WishlistAddress     WishlistAddress[]
    OrderAddress        OrderAddress[]

    @@unique([lat, long])
}

model City {
    cityId           String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name             String
    stateId          String             @db.Uuid
    State            State              @relation(fields: [stateId], references: [stateId])
    UserAddress      UserAddress[]
    WarehouseAddress WarehouseAddress[]
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    deletedAt        DateTime?
    EmployeeAddress  EmployeeAddress[]
    StoreAddress     StoreAddress[]
    WishlistAddress  WishlistAddress[]
    OrderAddress     OrderAddress[]
}

model State {
    stateId    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    /// store codes when possible and if not then name, be consistent for a country
    identifier String
    countryId  String    @db.Uuid
    Country    Country   @relation(fields: [countryId], references: [countryId])
    City       City[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

model Country {
    countryId String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    code      String    @unique
    State     State[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}
